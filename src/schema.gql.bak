enum ExpressionType {
  Expression
  Phrase
  Proverb
  Word
}

enum StoryType {
  Poem
  Song
  Story
}

enum NounType {
  Name
  Place
  Person
}

enum PartOfSpeech {
  Adjective
  Adverb # Includes connectives such as "likewise".
  Conjunction
  Interjection # Includes exclamations such as "oh!"
  Noun
  Preposition
  Pronoun
  Verb

  Prefix
  Suffix
}

enum ReferenceType {
  Article
  Audio
  Book
  Encyclopedia
  Film
  Interview
  Paper
  Person
  Report
  SocialMedia
  Song
  Video
  Website
  Other
}

type Alphabet {
  code: String! @id # Directives: @upsert
  name: String! # Directives: @lang
  script: Script
  characters: String
  languages: [Language] @hasInverse(field: alphabets)
  references: [Reference]
}

type Expression {
  id: ID! # TODO
  type: ExpressionType! @search(by: [hash])
  titles: [Transliteration!]!
  languages: [Language!]!
  partOfSpeech: PartOfSpeech @search(by: [hash])
  nounType: NounType @search(by: [hash])
  lexeme: Expression # When the lexeme references itself, we have a lemma.
  literalTranslation: String # Directives: @lang
  practicalTranslation: String # Directives: @lang
  meaning: String # Directives: @lang
  tags: [Tag]
  relatedExpressions: [Expression] # Synonyms, antonyms, compound words maybe
  references: [Reference]
}

type Language {
  code: String! @id # Directives: @upsert
  names: [Transliteration!]!
  parent: Language
  lexifier: Language
  relatedLanguages: [Language]
  glottologId: String @search(by: [hash])
  alphabets: [Alphabet] @hasInverse(field: languages)
  isFamily: Boolean @search
  references: [Reference]
}

# type Media {
#   # TODO
# }

type Reference {
  type: ReferenceType! @search(by: [hash])
  mla: String
}

type Script {
  code: String! @id # Directives: @upsert
  names: [Transliteration]
}

type Story {
  type: StoryType! @search(by: [hash])
  lines: [StoryLine]! @hasInverse(field: story)
  language: Language
  script: Script
}

type StoryLine {
  story: Story! @hasInverse(field: lines)
  content: String!
}

type Tag {
  name: String! @search(by: [hash]) # Directives: @lang
}

type Transliteration {
  value: String! @search(by: [hash])
  transliterationLangCode: String @search(by: [hash])
  transliterationScriptCode: String @search(by: [hash])
}
